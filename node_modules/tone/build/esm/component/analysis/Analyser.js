var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ToneAudioNode } from "../../core/context/ToneAudioNode";
import { optionsFromArguments } from "../../core/util/Defaults";
/**
 * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
 * Extracts FFT or Waveform data from the incoming signal.
 * @category Component
 */
var Analyser = /** @class */ (function (_super) {
    __extends(Analyser, _super);
    function Analyser() {
        var _this = _super.call(this, optionsFromArguments(Analyser.getDefaults(), arguments, ["type", "size"])) || this;
        _this.name = "Analyser";
        /**
         *  The analyser node.
         */
        _this._analyser = _this.context.createAnalyser();
        var options = optionsFromArguments(Analyser.getDefaults(), arguments, ["type", "size"]);
        // set the values initially
        _this.size = options.size;
        _this.type = options.type;
        _this.input = _this.output = _this._analyser;
        return _this;
    }
    Analyser.getDefaults = function () {
        return Object.assign(ToneAudioNode.getDefaults(), {
            size: 1024,
            smoothing: 0.8,
            type: "fft",
        });
    };
    /**
     *  Run the analysis given the current settings and return the
     */
    Analyser.prototype.getValue = function () {
        if (this._type === "fft") {
            this._analyser.getFloatFrequencyData(this._buffer);
        }
        else if (this._type === "waveform") {
            this._analyser.getFloatTimeDomainData(this._buffer);
        }
        return this._buffer;
    };
    Object.defineProperty(Analyser.prototype, "size", {
        /**
         *  The size of analysis. This must be a power of two in the range 16 to 16384.
         */
        get: function () {
            return this._analyser.frequencyBinCount;
        },
        set: function (size) {
            this._analyser.fftSize = size * 2;
            this._buffer = new Float32Array(size);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Analyser.prototype, "type", {
        /**
         *  The analysis function returned by analyser.getValue(), either "fft" or "waveform".
         */
        get: function () {
            return this._type;
        },
        set: function (type) {
            this.assert(type === "waveform" || type === "fft", "Analyser: invalid type: " + type);
            this._type = type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Analyser.prototype, "smoothing", {
        /**
         *  0 represents no time averaging with the last analysis frame.
         */
        get: function () {
            return this._analyser.smoothingTimeConstant;
        },
        set: function (val) {
            this._analyser.smoothingTimeConstant = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Clean up.
     */
    Analyser.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._analyser.disconnect();
        return this;
    };
    return Analyser;
}(ToneAudioNode));
export { Analyser };
//# sourceMappingURL=Analyser.js.map