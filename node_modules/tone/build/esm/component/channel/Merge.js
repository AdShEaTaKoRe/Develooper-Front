var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ToneAudioNode } from "../../core/context/ToneAudioNode";
import { optionsFromArguments } from "../../core/util/Defaults";
/**
 * Merge brings multiple mono input channels into a single multichannel output channel.
 *
 * @example
 * var merge = new Merge().toDestination();
 * //routing a sine tone in the left channel
 * //and noise in the right channel
 * var osc = new Tone.Oscillator().connect(merge.left);
 * var noise = new Tone.Noise().connect(merge.right);
 * //starting our oscillators
 * noise.start();
 * osc.start();
 */
var Merge = /** @class */ (function (_super) {
    __extends(Merge, _super);
    function Merge() {
        var _this = _super.call(this, optionsFromArguments(Merge.getDefaults(), arguments, ["channels"])) || this;
        _this.name = "Merge";
        var options = optionsFromArguments(Merge.getDefaults(), arguments, ["channels"]);
        _this._merger = _this.output = _this.input = _this.context.createChannelMerger(options.channels);
        return _this;
    }
    Merge.getDefaults = function () {
        return Object.assign(ToneAudioNode.getDefaults(), {
            channels: 2,
        });
    };
    Merge.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._merger.disconnect();
        return this;
    };
    return Merge;
}(ToneAudioNode));
export { Merge };
//# sourceMappingURL=Merge.js.map