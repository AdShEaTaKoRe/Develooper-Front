var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import * as Classes from "./classes";
import { FrequencyClass } from "./core/type/Frequency";
import { MidiClass } from "./core/type/Midi";
import { TicksClass } from "./core/type/Ticks";
import { TimeClass } from "./core/type/Time";
import { TransportTimeClass } from "./core/type/TransportTime";
import { isDefined, isFunction } from "./core/util/TypeCheck";
/**
 * Bind the TimeBaseClass to the context
 */
// tslint:disable-next-line: typedef
function bindTypeClass(context, type) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (type.bind.apply(type, __spread([void 0, context], args)))();
    };
}
/**
 * Return an object with all of the classes bound to the passed in context
 * @param context The context to bind all of the nodes to
 */
export function fromContext(context) {
    var toneFromContext = {};
    Object.keys(Classes).forEach(function (key) {
        var cls = Classes[key];
        if (isDefined(cls) && isFunction(cls.getDefaults)) {
            toneFromContext[key] = /** @class */ (function (_super) {
                __extends(ToneFromContextNode, _super);
                function ToneFromContextNode() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ToneFromContextNode.prototype, "defaultContext", {
                    get: function () {
                        return context;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ToneFromContextNode;
            }(cls));
        }
        else {
            // otherwise just copy it over
            toneFromContext[key] = Classes[key];
        }
    });
    toneFromContext.now = function () { return context.now(); };
    toneFromContext.Transport = context.transport;
    toneFromContext.Destination = context.destination;
    // add the type classes
    toneFromContext.Midi = bindTypeClass(context, MidiClass);
    toneFromContext.Time = bindTypeClass(context, TimeClass);
    toneFromContext.Frequency = bindTypeClass(context, FrequencyClass);
    toneFromContext.Ticks = bindTypeClass(context, TicksClass);
    toneFromContext.TransportTime = bindTypeClass(context, TransportTimeClass);
    // return the object
    return toneFromContext;
}
//# sourceMappingURL=fromContext.js.map