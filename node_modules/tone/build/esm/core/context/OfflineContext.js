var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { createOfflineAudioContext } from "../context/AudioContext";
import { Context } from "../context/Context";
import { isOfflineAudioContext } from "../util/AdvancedTypeCheck";
/**
 * Wrapper around the OfflineAudioContext
 * @category Core
 */
var OfflineContext = /** @class */ (function (_super) {
    __extends(OfflineContext, _super);
    function OfflineContext() {
        var _this = _super.call(this, {
            clockSource: "offline",
            context: isOfflineAudioContext(arguments[0]) ?
                arguments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),
            lookAhead: 0,
            updateInterval: isOfflineAudioContext(arguments[0]) ?
                128 / arguments[0].sampleRate : 128 / arguments[2],
        }) || this;
        _this.name = "OfflineContext";
        /**
         *  An artificial clock source
         */
        _this._currentTime = 0;
        _this._duration = isOfflineAudioContext(arguments[0]) ?
            arguments[0].length / arguments[0].sampleRate : arguments[1];
        return _this;
    }
    /**
     *  Override the now method to point to the internal clock time
     */
    OfflineContext.prototype.now = function () {
        return this._currentTime;
    };
    Object.defineProperty(OfflineContext.prototype, "currentTime", {
        /**
         * Same as this.now()
         */
        get: function () {
            return this._currentTime;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Render the output of the OfflineContext
     */
    OfflineContext.prototype.render = function () {
        while (this._duration - this._currentTime >= 0) {
            // invoke all the callbacks on that time
            this.emit("tick");
            // increment the clock in 5ms chunks
            this._currentTime += 128 / this.sampleRate;
        }
        return this._context.startRendering();
    };
    /**
     *  Close the context
     */
    OfflineContext.prototype.close = function () {
        return Promise.resolve();
    };
    return OfflineContext;
}(Context));
export { OfflineContext };
//# sourceMappingURL=OfflineContext.js.map