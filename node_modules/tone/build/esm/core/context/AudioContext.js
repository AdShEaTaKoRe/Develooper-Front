import { AudioContext as stdAudioContext, OfflineAudioContext as stdOfflineAudioContext, } from "standardized-audio-context";
/**
 * Create a new AudioContext
 */
function createAudioContext() {
    return new stdAudioContext();
}
/**
 * Create a new OfflineAudioContext
 */
export function createOfflineAudioContext(channels, length, sampleRate) {
    return new stdOfflineAudioContext(channels, length, sampleRate);
}
/**
 * A reference to the window object
 * @hidden
 */
export var theWindow = typeof self === "object" ? self : null;
/**
 * If the browser has a window object which has an AudioContext
 * @hidden
 */
export var hasAudioContext = theWindow &&
    (theWindow.hasOwnProperty("AudioContext") || theWindow.hasOwnProperty("webkitAudioContext"));
/**
 * The global audio context which is getable and assignable through
 * getAudioContext and setAudioContext
 */
var globalContext;
// if it was created already, use that one
// this enables multiple versions of Tone.js to run on the same page.
if (theWindow && theWindow.TONE_AUDIO_CONTEXT) {
    globalContext = theWindow.TONE_AUDIO_CONTEXT;
}
/**
 * Returns the default system-wide AudioContext
 */
export function getAudioContext() {
    if (!globalContext && hasAudioContext) {
        setAudioContext(createAudioContext());
    }
    return globalContext;
}
/**
 * Set the default audio context
 */
export function setAudioContext(context) {
    globalContext = context;
    if (theWindow) {
        theWindow.TONE_AUDIO_CONTEXT = globalContext;
    }
}
//# sourceMappingURL=AudioContext.js.map