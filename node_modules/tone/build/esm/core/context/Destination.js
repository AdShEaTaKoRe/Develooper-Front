var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { Volume } from "../../component/channel/Volume";
import { connectSeries } from "../Connect";
import { optionsFromArguments } from "../util/Defaults";
import { onContextClose, onContextInit } from "./ContextInitialization";
import { Gain } from "./Gain";
import { ToneAudioNode } from "./ToneAudioNode";
/**
 * A single master output which is connected to the
 * AudioDestinationNode (aka your speakers).
 * It provides useful conveniences such as the ability
 * to set the volume and mute the entire application.
 * It also gives you the ability to apply master effects to your application.
 *
 * @example
 * //the audio will go from the oscillator to the speakers
 * oscillator.connect(Destination);
 * //a convenience for connecting to the master output is also provided:
 * oscillator.toDestination();
 * //the above two examples are equivalent.
 * @category Core
 */
var Destination = /** @class */ (function (_super) {
    __extends(Destination, _super);
    function Destination() {
        var _this = _super.call(this, optionsFromArguments(Destination.getDefaults(), arguments)) || this;
        _this.name = "Destination";
        _this.input = new Volume({ context: _this.context });
        _this.output = new Gain({ context: _this.context });
        /**
         * The volume of the master output.
         */
        _this.volume = _this.input.volume;
        var options = optionsFromArguments(Destination.getDefaults(), arguments);
        connectSeries(_this.input, _this.output, _this.context.rawContext.destination);
        _this.mute = options.mute;
        return _this;
    }
    Destination.getDefaults = function () {
        return Object.assign(ToneAudioNode.getDefaults(), {
            mute: false,
            volume: 0,
        });
    };
    Object.defineProperty(Destination.prototype, "mute", {
        /**
         * Mute the output.
         * @example
         * //mute the output
         * Destination.mute = true;
         */
        get: function () {
            return this.input.mute;
        },
        set: function (mute) {
            this.input.mute = mute;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously
     *  chained in the master effects chain.
     * @param nodes All arguments will be connected in a row and the Master will be routed through it.
     * @return  {Destination}  this
     * @example
     * //some overall compression to keep the levels in check
     * var masterCompressor = new Tone.Compressor({
     * 	"threshold" : -6,
     * 	"ratio" : 3,
     * 	"attack" : 0.5,
     * 	"release" : 0.1
     * });
     * //give a little boost to the lows
     * var lowBump = new Tone.Filter(200, "lowshelf");
     * //route everything through the filter
     * //and compressor before going to the speakers
     * Destination.chain(lowBump, masterCompressor);
     */
    Destination.prototype.chain = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.input.disconnect();
        args.unshift(this.input);
        args.push(this.output);
        connectSeries.apply(void 0, __spread(args));
        return this;
    };
    /**
     *  Clean up
     */
    Destination.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.volume.dispose();
        return this;
    };
    return Destination;
}(ToneAudioNode));
export { Destination };
///////////////////////////////////////////////////////////////////////////
// 	INITIALIZATION
///////////////////////////////////////////////////////////////////////////
onContextInit(function (context) {
    context.destination = new Destination({ context: context });
});
onContextClose(function (context) {
    context.destination.dispose();
});
//# sourceMappingURL=Destination.js.map