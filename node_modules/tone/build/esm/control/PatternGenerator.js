var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
import { assert } from "../core/util/Debug";
/**
 * Start at the first value and go up to the last
 */
function upPatternGen(values) {
    var index;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = 0;
                _a.label = 1;
            case 1:
                if (!(index < values.length)) return [3 /*break*/, 3];
                index = clamp(index, values);
                return [4 /*yield*/, values[index]];
            case 2:
                _a.sent();
                index++;
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/];
        }
    });
}
/**
 * Start at the last value and go down to 0
 */
function downPatternGen(values) {
    var index;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = values.length - 1;
                _a.label = 1;
            case 1:
                if (!(index >= 0)) return [3 /*break*/, 3];
                index = clamp(index, values);
                return [4 /*yield*/, values[index]];
            case 2:
                _a.sent();
                index--;
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/];
        }
    });
}
/**
 * Infinitely yield the generator
 */
function infiniteGen(values, gen) {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!true) return [3 /*break*/, 2];
                return [5 /*yield**/, __values(gen(values))];
            case 1:
                _a.sent();
                return [3 /*break*/, 0];
            case 2: return [2 /*return*/];
        }
    });
}
/**
 * Make sure that the index is in the given range
 */
function clamp(index, values) {
    return Math.max(Math.min(index, values.length - 1), 0);
}
/**
 * Alternate between two generators
 */
function alternatingGenerator(values, directionUp) {
    var index;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = directionUp ? 0 : values.length - 1;
                _a.label = 1;
            case 1:
                if (!true) return [3 /*break*/, 3];
                index = clamp(index, values);
                return [4 /*yield*/, values[index]];
            case 2:
                _a.sent();
                if (directionUp) {
                    index++;
                    if (index >= values.length - 1) {
                        directionUp = false;
                    }
                }
                else {
                    index--;
                    if (index <= 0) {
                        directionUp = true;
                    }
                }
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/];
        }
    });
}
/**
 * Starting from the bottom move up 2, down 1
 */
function jumpUp(values) {
    var index, stepIndex;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = 0;
                stepIndex = 0;
                _a.label = 1;
            case 1:
                if (!(index < values.length)) return [3 /*break*/, 3];
                index = clamp(index, values);
                return [4 /*yield*/, values[index]];
            case 2:
                _a.sent();
                stepIndex++;
                index += (stepIndex % 2 ? 2 : -1);
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/];
        }
    });
}
/**
 * Starting from the top move down 2, up 1
 */
function jumpDown(values) {
    var index, stepIndex;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = values.length - 1;
                stepIndex = 0;
                _a.label = 1;
            case 1:
                if (!(index >= 0)) return [3 /*break*/, 3];
                index = clamp(index, values);
                return [4 /*yield*/, values[index]];
            case 2:
                _a.sent();
                stepIndex++;
                index += (stepIndex % 2 ? -2 : 1);
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/];
        }
    });
}
/**
 * Choose a random index each time
 */
function randomGen(values) {
    var randomIndex;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!true) return [3 /*break*/, 2];
                randomIndex = Math.floor(Math.random() * values.length);
                return [4 /*yield*/, values[randomIndex]];
            case 1:
                _a.sent();
                return [3 /*break*/, 0];
            case 2: return [2 /*return*/];
        }
    });
}
/**
 * Randomly go through all of the values once before choosing a new random order
 */
function randomOnce(values) {
    var copy, i, randVal, index;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                copy = [];
                for (i = 0; i < values.length; i++) {
                    copy.push(i);
                }
                _a.label = 1;
            case 1:
                if (!(copy.length > 0)) return [3 /*break*/, 3];
                randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);
                index = clamp(randVal[0], values);
                return [4 /*yield*/, values[index]];
            case 2:
                _a.sent();
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/];
        }
    });
}
/**
 * PatternGenerator returns a generator which will iterate over the given array
 * of values and yield the items according to the passed in pattern
 * @param values An array of values to iterate over
 * @param pattern The name of the pattern use when iterating over
 */
export function PatternGenerator(values, pattern) {
    var _a;
    if (pattern === void 0) { pattern = "up"; }
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                // safeguards
                assert(values.length > 0, "The array must have more than one value in it");
                _a = pattern;
                switch (_a) {
                    case "up": return [3 /*break*/, 1];
                    case "down": return [3 /*break*/, 3];
                    case "upDown": return [3 /*break*/, 5];
                    case "downUp": return [3 /*break*/, 7];
                    case "alternateUp": return [3 /*break*/, 9];
                    case "alternateDown": return [3 /*break*/, 11];
                    case "random": return [3 /*break*/, 13];
                    case "randomOnce": return [3 /*break*/, 15];
                }
                return [3 /*break*/, 17];
            case 1: return [5 /*yield**/, __values(infiniteGen(values, upPatternGen))];
            case 2:
                _b.sent();
                _b.label = 3;
            case 3: return [5 /*yield**/, __values(infiniteGen(values, downPatternGen))];
            case 4:
                _b.sent();
                _b.label = 5;
            case 5: return [5 /*yield**/, __values(alternatingGenerator(values, true))];
            case 6:
                _b.sent();
                _b.label = 7;
            case 7: return [5 /*yield**/, __values(alternatingGenerator(values, false))];
            case 8:
                _b.sent();
                _b.label = 9;
            case 9: return [5 /*yield**/, __values(infiniteGen(values, jumpUp))];
            case 10:
                _b.sent();
                _b.label = 11;
            case 11: return [5 /*yield**/, __values(infiniteGen(values, jumpDown))];
            case 12:
                _b.sent();
                _b.label = 13;
            case 13: return [5 /*yield**/, __values(randomGen(values))];
            case 14:
                _b.sent();
                _b.label = 15;
            case 15: return [5 /*yield**/, __values(infiniteGen(values, randomOnce))];
            case 16:
                _b.sent();
                _b.label = 17;
            case 17: return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=PatternGenerator.js.map