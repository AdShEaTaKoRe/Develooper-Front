var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Multiply } from "./Multiply";
import { SignalOperator } from "./SignalOperator";
/**
 * Negate the incoming signal. i.e. an input signal of 10 will output -10
 *
 * @example
 * var neg = new Negate();
 * var sig = new Signal(-2).connect(neg);
 * //output of neg is positive 2.
 */
var Negate = /** @class */ (function (_super) {
    __extends(Negate, _super);
    function Negate() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "Negate";
        /**
         *  negation is done by multiplying by -1
         */
        _this._multiply = new Multiply({
            context: _this.context,
            value: -1,
        });
        /**
         * The input and output are equal to the multiply node
         */
        _this.input = _this._multiply;
        _this.output = _this._multiply;
        return _this;
    }
    /**
     *  clean up
     * @returns {Negate} this
     */
    Negate.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._multiply.dispose();
        return this;
    };
    return Negate;
}(SignalOperator));
export { Negate };
//# sourceMappingURL=Negate.js.map