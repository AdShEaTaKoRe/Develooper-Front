var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { connectSeries } from "../core/Connect";
import { Gain } from "../core/context/Gain";
import { optionsFromArguments } from "../core/util/Defaults";
import { Signal } from "./Signal";
/**
 * Add a signal and a number or two signals. When no value is
 * passed into the constructor, Tone.Add will sum input and `addend`
 * If a value is passed into the constructor, the it will be added to the input.
 *
 * @example
 * var signal = new Signal(2);
 * var add = new Add(2);
 * signal.connect(add);
 * //the output of add equals 4
 * @example
 * //if constructed with no arguments
 * //it will add the first and second inputs
 * var add = new Add();
 * var sig0 = new Signal(3).connect(add);
 * var sig1 = new Signal(4).connect(add.addend);
 * //the output of add equals 7.
 */
var Add = /** @class */ (function (_super) {
    __extends(Add, _super);
    function Add() {
        var _this = _super.call(this, Object.assign(optionsFromArguments(Add.getDefaults(), arguments, ["value"]))) || this;
        _this.override = false;
        _this.name = "Add";
        /**
         *  the summing node
         */
        _this._sum = new Gain({ context: _this.context });
        _this.input = _this._sum;
        _this.output = _this._sum;
        /**
         * The value which is added to the input signal
         */
        _this.addend = _this._param;
        connectSeries(_this._constantSource, _this._sum);
        return _this;
    }
    Add.getDefaults = function () {
        return Object.assign(Signal.getDefaults(), {
            value: 0,
        });
    };
    Add.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._sum.dispose();
        return this;
    };
    return Add;
}(Signal));
export { Add };
//# sourceMappingURL=Add.js.map