var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Gain } from "../core/context/Gain";
import { optionsFromArguments } from "../core/util/Defaults";
import { Signal } from "./Signal";
/**
 * Multiply two incoming signals. Or, if a number is given in the constructor,
 * multiplies the incoming signal by that value.
 *
 * @example
 * const mult = new Multiply();
 * const sigA = new Tone.Signal(3);
 * const sigB = new Tone.Signal(4);
 * sigA.connect(mult);
 * sigB.connect(mult.factor);
 * //output of mult is 12.
 * @example
 * const mult = new Multiply(10);
 * const sig = new Tone.Signal(2).connect(mult);
 * //the output of mult is 20.
 */
var Multiply = /** @class */ (function (_super) {
    __extends(Multiply, _super);
    function Multiply() {
        var _this = _super.call(this, Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, ["value"]))) || this;
        _this.name = "Multiply";
        /**
         * Indicates if the value should be overridden on connection
         */
        _this.override = false;
        /**
         * the input gain node
         */
        _this._mult = new Gain({ context: _this.context });
        /**
         * The multiplicand input.
         */
        _this.input = _this._mult;
        /**
         * The product of the input and {@link factor}
         */
        _this.output = _this._mult;
        var options = optionsFromArguments(Multiply.getDefaults(), arguments, ["value"]);
        _this.factor = _this._param = _this._mult.gain;
        _this.factor.setValueAtTime(options.value, 0);
        return _this;
    }
    Multiply.getDefaults = function () {
        return Object.assign(Signal.getDefaults(), {
            value: 0,
        });
    };
    Multiply.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._mult.dispose();
        return this;
    };
    return Multiply;
}(Signal));
export { Multiply };
//# sourceMappingURL=Multiply.js.map