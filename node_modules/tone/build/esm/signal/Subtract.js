var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { connectSeries } from "../core/Connect";
import { Gain } from "../core/context/Gain";
import { optionsFromArguments } from "../core/util/Defaults";
import { Negate } from "../signal/Negate";
import { Signal } from "../signal/Signal";
/**
 * Subtract the signal connected to the input is subtracted from the signal connected
 * The subtrahend.
 *
 * @example
 * var sub = new Subtract(1);
 * var sig = new Tone.Signal(4).connect(sub);
 * //the output of sub is 3.
 * @example
 * var sub = new Subtract();
 * var sigA = new Tone.Signal(10);
 * var sigB = new Tone.Signal(2.5);
 * sigA.connect(sub);
 * sigB.connect(sub.subtrahend);
 * //output of sub is 7.5
 */
var Subtract = /** @class */ (function (_super) {
    __extends(Subtract, _super);
    function Subtract() {
        var _this = _super.call(this, Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, ["value"]))) || this;
        _this.override = false;
        _this.name = "Subtract";
        /**
         *  the summing node
         */
        _this._sum = new Gain({ context: _this.context });
        _this.input = _this._sum;
        _this.output = _this._sum;
        /**
         *  Negate the input of the second input before connecting it to the summing node.
         */
        _this._neg = new Negate({ context: _this.context });
        /**
         * The value which is subtracted from the main signal
         */
        _this.subtrahend = _this._param;
        connectSeries(_this._constantSource, _this._neg, _this._sum);
        return _this;
    }
    Subtract.getDefaults = function () {
        return Object.assign(Signal.getDefaults(), {
            value: 0,
        });
    };
    Subtract.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._neg.dispose();
        this._sum.dispose();
        return this;
    };
    return Subtract;
}(Signal));
export { Subtract };
//# sourceMappingURL=Subtract.js.map