var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { optionsFromArguments } from "..//core/util/Defaults";
import { ToneAudioNode } from "../core/context/ToneAudioNode";
import { connectSignal } from "./Signal";
/**
 * A signal operator has an input and output and modifies the signal.
 */
var SignalOperator = /** @class */ (function (_super) {
    __extends(SignalOperator, _super);
    function SignalOperator() {
        return _super.call(this, Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, ["context"]))) || this;
    }
    SignalOperator.prototype.connect = function (destination, outputNum, inputNum) {
        if (outputNum === void 0) { outputNum = 0; }
        if (inputNum === void 0) { inputNum = 0; }
        connectSignal(this, destination, outputNum, inputNum);
        return this;
    };
    return SignalOperator;
}(ToneAudioNode));
export { SignalOperator };
//# sourceMappingURL=SignalOperator.js.map