var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Gain } from "../core/context/Gain";
import { connect, disconnect } from "../core/context/ToneAudioNode";
import { optionsFromArguments } from "../core/util/Defaults";
import { SignalOperator } from "./SignalOperator";
/**
 *  Tone.Zero outputs 0's at audio-rate. The reason this has to be
 *  it's own class is that many browsers optimize out Tone.Signal
 *  with a value of 0 and will not process nodes further down the graph.
 */
var Zero = /** @class */ (function (_super) {
    __extends(Zero, _super);
    function Zero() {
        var _this = _super.call(this, Object.assign(optionsFromArguments(Zero.getDefaults(), arguments))) || this;
        _this.name = "Zero";
        /**
         * The gain node which connects the constant source to the output
         */
        _this._gain = new Gain({ context: _this.context });
        /**
         * Only outputs 0
         */
        _this.output = _this._gain;
        /**
         * no input node
         */
        _this.input = undefined;
        connect(_this.context.getConstant(0), _this._gain);
        return _this;
    }
    /**
     * clean up
     */
    Zero.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        disconnect(this.context.getConstant(0), this._gain);
        return this;
    };
    return Zero;
}(SignalOperator));
export { Zero };
//# sourceMappingURL=Zero.js.map