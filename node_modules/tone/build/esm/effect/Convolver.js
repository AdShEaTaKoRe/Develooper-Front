var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ToneAudioBuffer } from "../core/context/ToneAudioBuffer";
import { optionsFromArguments } from "../core/util/Defaults";
import { noOp } from "../core/util/Interface";
import { Effect } from "./Effect";
/**
 * Convolver is a wrapper around the Native Web Audio
 * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
 * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
 * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
 *
 * @example
 * //initializing the convolver with an impulse response
 * var convolver = new Convolver("./path/to/ir.wav").toDestination();
 */
var Convolver = /** @class */ (function (_super) {
    __extends(Convolver, _super);
    function Convolver() {
        var _this = _super.call(this, optionsFromArguments(Convolver.getDefaults(), arguments, ["url", "onload"])) || this;
        _this.name = "Convolver";
        /**
         *  The native ConvolverNode
         */
        _this._convolver = _this.context.createConvolver();
        var options = optionsFromArguments(Convolver.getDefaults(), arguments, ["url", "onload"]);
        _this._buffer = new ToneAudioBuffer(options.url, function (buffer) {
            _this.buffer = buffer;
            options.onload();
        });
        // set if it's already loaded
        if (_this._buffer.loaded) {
            _this.buffer = _this._buffer;
        }
        // initially set normalization
        _this.normalize = options.normalize;
        // connect it up
        _this.connectEffect(_this._convolver);
        return _this;
    }
    Convolver.getDefaults = function () {
        return Object.assign(Effect.getDefaults(), {
            normalize: true,
            onload: noOp,
        });
    };
    /**
     * Load an impulse response url as an audio buffer.
     * Decodes the audio asynchronously and invokes
     * the callback once the audio buffer loads.
     * @param url The url of the buffer to load. filetype support depends on the browser.
     */
    Convolver.prototype.load = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this._buffer.load(url)];
                    case 1:
                        _a.buffer = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(Convolver.prototype, "buffer", {
        /**
         *  The convolver's buffer
         */
        get: function () {
            if (this._buffer.length) {
                return this._buffer;
            }
            else {
                return null;
            }
        },
        set: function (buffer) {
            if (buffer) {
                this._buffer.set(buffer);
            }
            // if it's already got a buffer, create a new one
            if (this._convolver.buffer) {
                // disconnect the old one
                this.effectSend.disconnect();
                this._convolver.disconnect();
                // create and connect a new one
                this._convolver = this.context.createConvolver();
                this.connectEffect(this._convolver);
            }
            var buff = this._buffer.get();
            this._convolver.buffer = buff ? buff : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Convolver.prototype, "normalize", {
        /**
         * The normalize property of the ConvolverNode interface is a boolean that
         * controls whether the impulse response from the buffer will be scaled by
         * an equal-power normalization when the buffer attribute is set, or not.
         */
        get: function () {
            return this._convolver.normalize;
        },
        set: function (norm) {
            this._convolver.normalize = norm;
        },
        enumerable: true,
        configurable: true
    });
    Convolver.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._buffer.dispose();
        this._convolver.disconnect();
        return this;
    };
    return Convolver;
}(Effect));
export { Convolver };
//# sourceMappingURL=Convolver.js.map