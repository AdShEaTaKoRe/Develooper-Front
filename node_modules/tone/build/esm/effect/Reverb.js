var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Merge } from "../component/channel/Merge";
import { Gain } from "../core/context/Gain";
import { Offline } from "../core/context/Offline";
import { optionsFromArguments } from "../core/util/Defaults";
import { Noise } from "../source/Noise";
import { Effect } from "./Effect";
/**
 *  Simple convolution created with decaying noise.
 *  Generates an Impulse Response Buffer
 * 	with Tone.Offline then feeds the IR into ConvolverNode.
 * 	Note: the Reverb will not make any sound until [generate](#generate)
 * 	has been invoked and resolved.
 *
 * 	Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).
 * 	Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.
 *
 */
var Reverb = /** @class */ (function (_super) {
    __extends(Reverb, _super);
    function Reverb() {
        var _this = _super.call(this, optionsFromArguments(Reverb.getDefaults(), arguments, ["decay"])) || this;
        _this.name = "Reverb";
        /**
         *  Convolver node
         */
        _this._convolver = _this.context.createConvolver();
        var options = optionsFromArguments(Reverb.getDefaults(), arguments, ["decay"]);
        _this.decay = options.decay;
        _this.preDelay = options.preDelay;
        _this.connectEffect(_this._convolver);
        return _this;
    }
    Reverb.getDefaults = function () {
        return Object.assign(Effect.getDefaults(), {
            decay: 1.5,
            preDelay: 0.01,
        });
    };
    /**
     * Generate the Impulse Response. Returns a promise while the IR is being generated.
     * @return Promise which returns this object.
     */
    Reverb.prototype.generate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var buffer;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Offline(function (context) {
                            // create a noise burst which decays over the duration
                            var noiseL = new Noise({ context: context });
                            var noiseR = new Noise({ context: context });
                            var merge = new Merge({ context: context });
                            noiseL.connect(merge, 0, 0);
                            noiseR.connect(merge, 0, 1);
                            var gainNode = new Gain({ context: context }).toDestination();
                            merge.connect(gainNode);
                            noiseL.start(0);
                            noiseR.start(0);
                            // predelay
                            gainNode.gain.setValueAtTime(0, 0);
                            gainNode.gain.setValueAtTime(1, _this.preDelay);
                            // decay
                            gainNode.gain.exponentialApproachValueAtTime(0, _this.preDelay, _this.decay);
                        }, this.decay + this.preDelay)];
                    case 1:
                        buffer = _a.sent();
                        this._convolver.buffer = buffer.get();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Reverb.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._convolver.disconnect();
        return this;
    };
    return Reverb;
}(Effect));
export { Reverb };
//# sourceMappingURL=Reverb.js.map