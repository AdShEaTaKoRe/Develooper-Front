import { isAudioNode } from '../guards/audio-node';
import { isDelayNode } from '../guards/delay-node';
export const createDetectCycles = (audioParamAudioNodeStore, createNotSupportedError, getAudioNodeConnections, getValueForKey) => {
    return function detectCycles(source, destination) {
        const audioNodeOfDestination = (isAudioNode(destination))
            ? destination
            : getValueForKey(audioParamAudioNodeStore, destination);
        if (isDelayNode(audioNodeOfDestination)) {
            return true;
        }
        if (source === audioNodeOfDestination) {
            throw createNotSupportedError();
        }
        const { outputs } = getAudioNodeConnections(audioNodeOfDestination);
        for (const outputConnection of outputs) {
            if (detectCycles(source, outputConnection[0])) {
                return true;
            }
        }
        return false;
    };
};
//# sourceMappingURL=/build/es2018/factories/detect-cycles.js.map