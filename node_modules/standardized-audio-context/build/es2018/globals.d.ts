import { IAudioGraph, IAudioNode, IAudioParam, IAudioWorkletProcessor, IAudioWorkletProcessorConstructor, IMinimalBaseAudioContext } from './interfaces';
import { TAudioBufferStore, TAudioNodeStore, TAudioParamStore, TContextStore, TInternalStateEventListener, TNativeAudioWorkletNode, TNativeContext, TNativeGainNode, TPeriodicWaveStore } from './types';
export declare const ACTIVE_AUDIO_NODE_STORE: WeakSet<IAudioNode<IMinimalBaseAudioContext>>;
export declare const AUDIO_BUFFER_STORE: TAudioBufferStore;
export declare const AUDIO_NODE_STORE: TAudioNodeStore;
export declare const AUDIO_GRAPHS: WeakMap<IMinimalBaseAudioContext, IAudioGraph<IMinimalBaseAudioContext>>;
export declare const AUDIO_PARAM_STORE: TAudioParamStore;
export declare const AUDIO_PARAM_AUDIO_NODE_STORE: WeakMap<IAudioParam, IAudioNode<IMinimalBaseAudioContext>>;
export declare const AUXILIARY_GAIN_NODE_STORE: WeakMap<TNativeAudioWorkletNode, Map<number, TNativeGainNode>>;
export declare const BACKUP_NATIVE_CONTEXT_STORE: WeakMap<TNativeContext, TNativeContext>;
export declare const CONTEXT_STORE: TContextStore;
export declare const DETACHED_ARRAY_BUFFERS: WeakSet<ArrayBuffer>;
export declare const EVENT_LISTENERS: WeakMap<IAudioNode<IMinimalBaseAudioContext>, Set<TInternalStateEventListener>>;
export declare const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS: WeakMap<TNativeContext, Map<string, IAudioWorkletProcessorConstructor>>;
export declare const NODE_TO_PROCESSOR_MAPS: WeakMap<TNativeContext, WeakMap<TNativeAudioWorkletNode, Promise<IAudioWorkletProcessor>>>;
export declare const PERIODIC_WAVE_STORE: TPeriodicWaveStore;
export declare const TEST_RESULTS: WeakMap<object, boolean>;
//# sourceMappingURL=/build/es2018/globals.d.ts.map